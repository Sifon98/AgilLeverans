import React, { useState, useContext, useEffect } from 'react'
import { NavContext } from "../context/NavContext";
import { UserContext } from "../context/UserContext";
import { v4 as uuidv4 } from 'uuid';
import SideMenu from '../components/SideMenu';
import DesktopHeader from '../components/DesktopHeader';
import MobileHeader from '../components/MobileHeader';


function Shoppingcart() {
    const { setNav } = useContext(NavContext);
    const { user, setUser } = useContext(UserContext);

    const [products, setProducts] = useState(null);
    const [totalPrice, setTotalPrice] = useState(0);

    useEffect(() => {
        fetchShoppingCart();
    }, [])

    const fetchShoppingCart = async () => {
        const res = await fetch("/api/saved-products?type=cart");
        const data = await res.json();
        let products = data.products.filter(x => x.item !== null);

        // Set total price & find imageIndex for each product 
        // (each product has an unique color, and an image corresponding to each color)
        let total = 0;
        products = products.map(x => {
            const countPrice = x.item.price * x.count;
            total += countPrice;
            return {...x, countPrice: parseFloat(countPrice.toFixed(2)), imageIndex: x.item.colors.findIndex(c => c.name === x.color.name)}
        })

        setProducts(products);
        setTotalPrice(total.toFixed(2));
    }

    const removeItem = async (id) => {

        const res = await fetch(`/api/saved-products/${id}?type=cart`, {
            method: "DELETE",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
            }
        })
        await res;

        // Update products
        const UpdateProducts = [...products].filter(x => x._id !== id);

        // Update total price
        let total = 0;
        UpdateProducts.forEach((x) => {
            total += x.item.price * x.count
        })

        // Set State
        setProducts(UpdateProducts);
        setTotalPrice(total.toFixed(2));
        return;
        setUser({
            ...user,
            cart: UpdateProducts
        })
    }



    const handleIncrementDecrement = async (id, count, currentPrice, increment) => {
        if(!increment && count === 1) return removeItem(id);

        if(increment && count === 10) return;

        increment ? count++ : count--;


        const UpdateProducts = [...products].map(x => {
            if(x._id === id) {
                return {...x, countPrice: parseFloat((x.item.price * count).toFixed(2)), count}
            } 
            return {...x}
        })
        setProducts(UpdateProducts);
        const total = increment ? parseFloat(totalPrice) + currentPrice : parseFloat(totalPrice) - currentPrice;
        setTotalPrice(total.toFixed(2));

        await fetch(`/api/saved-products/count/${id}?type=cart&count=${count}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
          })
    }

    return (
        <div className="shopping-wrapper page">
            <SideMenu backArrow={true} backPath="/go-back" />
            <DesktopHeader noCart={true} />
            <MobileHeader backArrow={true} backPath="/go-back"/>
            <div className="cart-container">
                <h1 className="cart-title">your cart.</h1>
            </div>
                <div className="box-container">
                    <div className="item-helper">
                    <div className="item-container">
                        {
                            products && products.map(x => (
                            <div className="item" key={x._id}>
                                <img alt="image"  className="item-pic" src={x.item.images[x.imageIndex]}></img>
                                <div className="product-info-wrapper">
                                    <p className="cart-text">{x.item.name}</p>
                                    <p className="cart-ref">ref: {x._id.substring(0, 8)}</p>
                                    <div className="circle-box-wrapper">
                                        <div className="color-box" style={{background: x.color.hex}}></div>
                                        <div className="size-box">{x.size}</div>
                                    </div>
                                </div>
                                <div className="add-remove-box">
                                    <div className="increment-btn" onClick={() => handleIncrementDecrement(x._id, x.count, x.item.price, 1)}><i className="fas fa-plus"></i></div>     
                                    <div className="item-count">{x.count}</div>
                                    <div className="decrement-btn" onClick={() => handleIncrementDecrement(x._id, x.count, x.item.price, 0)}><i className="fas fa-minus"></i></div>                
                                </div>
                                <p className="price-tag">${x.countPrice.toFixed(2)}</p>
                                <div className="remove-item-btn" onClick={() => removeItem(x._id)}>
                                    <svg width="12" height="12" viewBox="0 0 5 6" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4.86645 1.19549L4.19129 0.52034L2.50329 2.20834L0.81529 0.52034L0.140137 1.19549L1.82814 2.88349L0.140137 4.5715L0.81529 5.24665L2.50329 3.55865L4.19129 5.24665L4.86645 4.5715L3.17844 2.88349L4.86645 1.19549Z" fill="#CDCDCD"/>
                                    </svg>
                                </div>

                            </div>
                            ))
                        }
                        {products != null ? products.length > 0 ? null : <div className="no-cart-items ">You have no products in you cart, go shopping!</div> : null}
                    </div>
                    </div>
                        <div className="subtotal-container">
                        <p id="totalText">cart subtotal.</p>
                        <div id="totalSum">$ {totalPrice}</div>
                        {products && products.length > 0 ? (
                            <svg onClick={() => setNav({path: "/checkout", direction: 1})} id ="blackBar" width="329" height="59" viewBox="0 0 329 59" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect width="329" height="59" rx="29.5" fill="black"/>
                            <path d="M87.7559 27.4375C87.432 24.75 85.398 23.2045 82.7048 23.2045C79.6309 23.2045 77.2843 25.375 77.2843 29.1818C77.2843 32.9773 79.5911 35.1591 82.7048 35.1591C85.6877 35.1591 87.4889 33.1761 87.7559 31.0341L85.2673 31.0227C85.0343 32.267 84.057 32.983 82.7445 32.983C80.9775 32.983 79.7786 31.6705 79.7786 29.1818C79.7786 26.7614 80.9605 25.3807 82.7616 25.3807C84.1082 25.3807 85.0798 26.1591 85.2673 27.4375H87.7559ZM92.7778 35.1705C95.4256 35.1705 97.0733 33.358 97.0733 30.6705C97.0733 27.9659 95.4256 26.1591 92.7778 26.1591C90.1301 26.1591 88.4824 27.9659 88.4824 30.6705C88.4824 33.358 90.1301 35.1705 92.7778 35.1705ZM92.7892 33.2955C91.5676 33.2955 90.9426 32.1761 90.9426 30.6534C90.9426 29.1307 91.5676 28.0057 92.7892 28.0057C93.9881 28.0057 94.6131 29.1307 94.6131 30.6534C94.6131 32.1761 93.9881 33.2955 92.7892 33.2955ZM100.428 29.9545C100.433 28.8295 101.104 28.1705 102.081 28.1705C103.053 28.1705 103.638 28.8068 103.632 29.875V35H106.053V29.4432C106.053 27.4091 104.859 26.1591 103.041 26.1591C101.746 26.1591 100.808 26.7955 100.416 27.8125H100.314V26.2727H98.0072V35H100.428V29.9545ZM111.962 26.2727H110.32V24.1818H107.9V26.2727H106.707V28.0909H107.9V32.6364C107.888 34.3466 109.053 35.1932 110.809 35.1193C111.434 35.0966 111.877 34.9716 112.121 34.892L111.741 33.0909C111.621 33.1136 111.366 33.1705 111.138 33.1705C110.656 33.1705 110.32 32.9886 110.32 32.3182V28.0909H111.962V26.2727ZM112.899 35H115.319V26.2727H112.899V35ZM114.115 25.1477C114.837 25.1477 115.427 24.5966 115.427 23.9205C115.427 23.25 114.837 22.6989 114.115 22.6989C113.399 22.6989 112.808 23.25 112.808 23.9205C112.808 24.5966 113.399 25.1477 114.115 25.1477ZM119.039 29.9545C119.045 28.8295 119.715 28.1705 120.692 28.1705C121.664 28.1705 122.249 28.8068 122.243 29.875V35H124.664V29.4432C124.664 27.4091 123.471 26.1591 121.653 26.1591C120.357 26.1591 119.42 26.7955 119.028 27.8125H118.925V26.2727H116.618V35H119.039V29.9545ZM131.528 31.2841C131.534 32.4545 130.733 33.0682 129.863 33.0682C128.949 33.0682 128.358 32.4261 128.352 31.3977V26.2727H125.932V31.8295C125.937 33.8693 127.13 35.1136 128.886 35.1136C130.199 35.1136 131.142 34.4375 131.534 33.4148H131.625V35H133.949V26.2727H131.528V31.2841ZM139.222 35.1705C141.381 35.1705 142.836 34.1193 143.176 32.5L140.938 32.3523C140.694 33.017 140.069 33.3636 139.262 33.3636C138.051 33.3636 137.284 32.5625 137.284 31.2614V31.2557H143.228V30.5909C143.228 27.625 141.432 26.1591 139.125 26.1591C136.557 26.1591 134.892 27.983 134.892 30.6761C134.892 33.4432 136.534 35.1705 139.222 35.1705ZM137.284 29.7557C137.336 28.7614 138.091 27.9659 139.165 27.9659C140.216 27.9659 140.944 28.7159 140.949 29.7557H137.284ZM151.872 26.2727H150.23V24.1818H147.81V26.2727H146.617V28.0909H147.81V32.6364C147.798 34.3466 148.963 35.1932 150.719 35.1193C151.344 35.0966 151.787 34.9716 152.031 34.892L151.651 33.0909C151.531 33.1136 151.276 33.1705 151.048 33.1705C150.566 33.1705 150.23 32.9886 150.23 32.3182V28.0909H151.872V26.2727ZM156.658 35.1705C159.306 35.1705 160.954 33.358 160.954 30.6705C160.954 27.9659 159.306 26.1591 156.658 26.1591C154.011 26.1591 152.363 27.9659 152.363 30.6705C152.363 33.358 154.011 35.1705 156.658 35.1705ZM156.67 33.2955C155.448 33.2955 154.823 32.1761 154.823 30.6534C154.823 29.1307 155.448 28.0057 156.67 28.0057C157.869 28.0057 158.494 29.1307 158.494 30.6534C158.494 32.1761 157.869 33.2955 156.67 33.2955ZM168.894 35.1705C171.218 35.1705 172.678 33.8068 172.792 31.8011H170.508C170.366 32.733 169.752 33.2557 168.923 33.2557C167.792 33.2557 167.059 32.3068 167.059 30.6364C167.059 28.9886 167.798 28.0455 168.923 28.0455C169.809 28.0455 170.377 28.6307 170.508 29.5H172.792C172.69 27.483 171.161 26.1591 168.883 26.1591C166.235 26.1591 164.599 27.9943 164.599 30.6705C164.599 33.3239 166.207 35.1705 168.894 35.1705ZM176.122 29.9545C176.128 28.8295 176.815 28.1705 177.804 28.1705C178.787 28.1705 179.366 28.8011 179.361 29.875V35H181.781V29.4432C181.787 27.3977 180.582 26.1591 178.764 26.1591C177.44 26.1591 176.554 26.7841 176.156 27.8125H176.054V23.3636H173.702V35H176.122V29.9545ZM187.023 35.1705C189.182 35.1705 190.637 34.1193 190.978 32.5L188.739 32.3523C188.495 33.017 187.87 33.3636 187.063 33.3636C185.853 33.3636 185.086 32.5625 185.086 31.2614V31.2557H191.029V30.5909C191.029 27.625 189.233 26.1591 186.927 26.1591C184.358 26.1591 182.694 27.983 182.694 30.6761C182.694 33.4432 184.336 35.1705 187.023 35.1705ZM185.086 29.7557C185.137 28.7614 185.893 27.9659 186.966 27.9659C188.018 27.9659 188.745 28.7159 188.75 29.7557H185.086ZM195.912 35.1705C198.235 35.1705 199.696 33.8068 199.809 31.8011H197.525C197.383 32.733 196.77 33.2557 195.94 33.2557C194.809 33.2557 194.076 32.3068 194.076 30.6364C194.076 28.9886 194.815 28.0455 195.94 28.0455C196.826 28.0455 197.395 28.6307 197.525 29.5H199.809C199.707 27.483 198.179 26.1591 195.9 26.1591C193.253 26.1591 191.616 27.9943 191.616 30.6705C191.616 33.3239 193.224 35.1705 195.912 35.1705ZM200.719 35H203.139V32.2273L203.793 31.483L206.174 35H209.009L205.605 30.0511L208.844 26.2727H206.066L203.27 29.5852H203.139V23.3636H200.719V35ZM212.975 35.1705C215.623 35.1705 217.271 33.358 217.271 30.6705C217.271 27.9659 215.623 26.1591 212.975 26.1591C210.328 26.1591 208.68 27.9659 208.68 30.6705C208.68 33.358 210.328 35.1705 212.975 35.1705ZM212.987 33.2955C211.765 33.2955 211.14 32.1761 211.14 30.6534C211.14 29.1307 211.765 28.0057 212.987 28.0057C214.186 28.0057 214.811 29.1307 214.811 30.6534C214.811 32.1761 214.186 33.2955 212.987 33.2955ZM223.801 31.2841C223.807 32.4545 223.006 33.0682 222.136 33.0682C221.222 33.0682 220.631 32.4261 220.625 31.3977V26.2727H218.205V31.8295C218.21 33.8693 219.404 35.1136 221.159 35.1136C222.472 35.1136 223.415 34.4375 223.807 33.4148H223.898V35H226.222V26.2727H223.801V31.2841ZM232.16 26.2727H230.518V24.1818H228.097V26.2727H226.904V28.0909H228.097V32.6364C228.086 34.3466 229.251 35.1932 231.006 35.1193C231.631 35.0966 232.075 34.9716 232.319 34.892L231.938 33.0909C231.819 33.1136 231.563 33.1705 231.336 33.1705C230.853 33.1705 230.518 32.9886 230.518 32.3182V28.0909H232.16V26.2727ZM246.223 35.6364L251.95 29.9091L246.223 24.1818L244.905 25.4943L248.365 28.9489H240.257V30.8693H248.365L244.905 34.3295L246.223 35.6364Z" fill="white"/>
                            </svg>
                        ):null}
                        <div className="payment-methods">
                            <p className="payment-text">we accept.</p>
                            <svg width="131" height="21" viewBox="0 0 131 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clipPath="url(#clip0)">
                                <path d="M128.033 1.55042C127.114 0.502834 125.452 0.0537109 123.327 0.0537109H117.158C116.948 0.0537187 116.744 0.128743 116.584 0.265296C116.425 0.401849 116.319 0.590973 116.286 0.798666L113.717 17.0887C113.666 17.4099 113.915 17.7008 114.24 17.7008H118.049L119.005 11.6344L118.975 11.8243C119.044 11.3955 119.41 11.0792 119.845 11.0792H121.654C125.209 11.0792 127.993 9.63523 128.806 5.45803C128.83 5.33449 128.851 5.21424 128.869 5.09677C128.767 5.04242 128.767 5.04242 128.869 5.09677C129.112 3.55284 128.868 2.50189 128.033 1.55042Z" fill="#27346A"/>
                                <path d="M120.462 4.54059C120.566 4.49102 120.68 4.46533 120.796 4.4654H125.632C126.204 4.4654 126.738 4.50267 127.227 4.58122C127.363 4.603 127.499 4.629 127.634 4.65919C127.825 4.7014 128.014 4.75307 128.201 4.814C128.441 4.89414 128.664 4.98747 128.869 5.09677C129.112 3.55224 128.868 2.50189 128.033 1.55042C127.113 0.502834 125.452 0.0537109 123.327 0.0537109H117.158C116.723 0.0537109 116.354 0.369924 116.286 0.798666L113.717 17.0881C113.666 17.4098 113.915 17.7003 114.24 17.7003H118.049L120.033 5.11708C120.052 4.9934 120.102 4.87631 120.177 4.77589C120.251 4.67547 120.349 4.59472 120.462 4.54059Z" fill="#27346A"/>
                                <path d="M128.806 5.45819C127.993 9.63479 125.209 11.0794 121.654 11.0794H119.844C119.41 11.0794 119.043 11.3957 118.975 11.8245L117.786 19.3674C117.741 19.6485 117.959 19.9032 118.243 19.9032H121.453C121.637 19.9032 121.815 19.8375 121.955 19.7181C122.095 19.5986 122.187 19.4332 122.216 19.2515L122.247 19.088L122.852 15.2533L122.891 15.0414C122.92 14.8597 123.013 14.6943 123.152 14.5749C123.292 14.4554 123.47 14.3897 123.654 14.3897H124.134C127.244 14.3897 129.679 13.1263 130.391 9.47233C130.688 7.94535 130.534 6.67047 129.748 5.775C129.51 5.50377 129.214 5.27977 128.869 5.09692C128.851 5.21499 128.83 5.33464 128.806 5.45819Z" fill="#2790C3"/>
                                <path d="M128.018 4.75747C127.891 4.72045 127.763 4.68767 127.634 4.65919C127.499 4.6295 127.364 4.60368 127.227 4.58175C126.738 4.50267 126.205 4.46533 125.631 4.46533H120.796C120.681 4.46507 120.567 4.49099 120.463 4.54112C120.35 4.59508 120.251 4.67578 120.177 4.77623C120.102 4.87669 120.053 4.99386 120.033 5.11761L119.006 11.6344L118.976 11.8243C119.043 11.3955 119.41 11.0792 119.845 11.0792H121.655C125.21 11.0792 127.994 9.63523 128.807 5.45804C128.831 5.33449 128.851 5.21477 128.87 5.09677C128.664 4.98807 128.441 4.89414 128.201 4.81453C128.14 4.79445 128.08 4.77543 128.018 4.75747" fill="#1F264F"/>
                                </g>
                                <path d="M81.2246 0.815927C79.7366 0.265504 78.1638 -0.0107017 76.5802 0.00031713C71.4588 0.00031713 67.8418 2.61937 67.8162 6.37899C67.7842 9.14102 70.3865 10.6975 72.355 11.6203C74.3748 12.5692 75.0501 13.1671 75.0437 14.0152C75.0309 15.3052 73.4305 15.8901 71.9421 15.8901C69.8968 15.8901 68.7797 15.6009 67.0608 14.8763L66.4238 14.5741L65.6972 18.9024C66.9424 19.4288 69.1862 19.8804 71.5036 19.9194C76.9482 19.9194 80.5076 17.3166 80.5492 13.3166C80.594 11.1102 79.1857 9.44322 76.2217 8.06545C74.4196 7.17185 73.3025 6.57395 73.3025 5.66736C73.3025 4.86474 74.2595 4.00689 76.2601 4.00689C77.5915 3.97419 78.9147 4.22778 80.1427 4.75101L80.6228 4.96872L81.3494 0.786683L81.2246 0.815927ZM94.5146 0.351257H90.5135C89.2684 0.351257 88.3305 0.698948 87.7864 1.95324L80.0915 19.6497H85.5362L86.6245 16.748L93.2694 16.7545C93.4263 17.4336 93.9064 19.6497 93.9064 19.6497H98.7077L94.5146 0.351257ZM60.451 0.188784H65.6396L62.3939 19.497H57.2118L60.451 0.182286V0.188784ZM47.2795 10.8307L47.8172 13.5115L52.8874 0.351257H58.3833L50.2179 19.6237H44.7348L40.2536 3.30501C40.181 3.03592 40.0106 2.80483 39.7767 2.65837C38.1615 1.81136 36.4502 1.16858 34.6809 0.744438L34.7513 0.338257H43.1024C44.2355 0.383749 45.1477 0.744439 45.4518 1.97273L47.2763 10.8405L47.2795 10.8307ZM88.1129 12.7999L90.1806 7.39931C90.155 7.4578 90.6063 6.28475 90.8688 5.56012L91.2241 7.22709L92.4244 12.7966H88.1097L88.1129 12.7999Z" fill="#4267B2"/>
                                <path fillRule="evenodd" clipRule="evenodd" d="M5.59717 19.7217C9.55048 21.6125 14.4297 20.6768 17.3772 17.1647C20.8709 13.0018 20.3283 6.79597 16.1652 3.30347L13.3977 6.6011C16.65 9.32958 17.074 14.178 14.3446 17.4302C12.168 20.0231 8.58465 20.889 5.59717 19.7216" fill="url(#paint0_linear)"/>
                                <path fillRule="evenodd" clipRule="evenodd" d="M5.59717 19.7217C9.55048 21.6125 14.4297 20.6768 17.3772 17.1647C17.7323 16.7419 18.0514 16.2901 18.3313 15.8141C18.7968 12.9215 17.7731 9.86405 15.3652 7.84397C14.7686 7.34281 14.1069 6.92487 13.398 6.60156C16.6501 9.33004 17.0737 14.1781 14.3445 17.4301C12.1681 20.0233 8.58487 20.8891 5.59717 19.7217Z" fill="url(#paint1_linear)"/>
                                <path fillRule="evenodd" clipRule="evenodd" d="M14.083 1.95806C10.1296 0.0674745 5.25057 1.0032 2.30294 4.51529C-1.1908 8.67813 -0.648169 14.884 3.5149 18.3765L6.28255 15.0789C3.03013 12.3504 2.60615 7.50198 5.33564 4.24979C7.51197 1.65652 11.0952 0.790756 14.0828 1.95817" fill="url(#paint2_linear)"/>
                                <path fillRule="evenodd" clipRule="evenodd" d="M14.0829 1.95806C10.1296 0.0674745 5.25051 1.0032 2.30287 4.51529C1.94776 4.93812 1.62862 5.3899 1.3488 5.86592C0.883287 8.75849 1.90698 11.8158 4.3149 13.836C4.91144 14.3372 5.57318 14.7551 6.28204 15.0784C3.03007 12.3499 2.60631 7.50187 5.33557 4.24979C7.51191 1.65652 11.0952 0.790756 14.0828 1.95817" fill="url(#paint3_linear)"/>
                                <defs>
                                <linearGradient id="paint0_linear" x1="16.9783" y1="13.6663" x2="12.7974" y2="5.33751" gradientUnits="userSpaceOnUse">
                                <stop stopColor="#EF2131"/>
                                <stop offset="1" stopColor="#FECF2C"/>
                                </linearGradient>
                                <linearGradient id="paint1_linear" x1="13.1516" y1="6.60144" x2="5.82236" y2="19.2895" gradientUnits="userSpaceOnUse">
                                <stop stopColor="#FBC52C"/>
                                <stop offset="0.264" stopColor="#F87130"/>
                                <stop offset="0.561" stopColor="#EF52E2"/>
                                <stop offset="1" stopColor="#661EEC"/>
                                </linearGradient>
                                <linearGradient id="paint2_linear" x1="2.89679" y1="8.12742" x2="6.90392" y2="16.2772" gradientUnits="userSpaceOnUse">
                                <stop stopColor="#78F6D8"/>
                                <stop offset="0.266" stopColor="#77D1F6"/>
                                <stop offset="0.554" stopColor="#70A4F3"/>
                                <stop offset="1" stopColor="#661EEC"/>
                                </linearGradient>
                                <linearGradient id="paint3_linear" x1="6.69021" y1="15.0784" x2="13.9623" y2="2.43383" gradientUnits="userSpaceOnUse">
                                <stop stopColor="#536EED"/>
                                <stop offset="0.247" stopColor="#54C3EC"/>
                                <stop offset="0.564" stopColor="#64D769"/>
                                <stop offset="1" stopColor="#FECF2C"/>
                                </linearGradient>
                                <clipPath id="clip0">
                                <rect width="16.8863" height="19.92" fill="white" transform="translate(113.708)"/>
                                </clipPath>
                                </defs>
                            </svg>
                        </div>
                        </div>
                </div>
            </div>

    )
}


export default Shoppingcart