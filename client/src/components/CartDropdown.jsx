import React, { useRef, useState, useContext, useEffect } from 'react'
import { NavContext } from "../context/NavContext";
import { UserContext } from "../context/UserContext";

function CartDropdown({cartToggle, setCartToggle, wishlist}) {
    const { setNav } = useContext(NavContext);
    const { user } = useContext(UserContext);
    const Ref = useRef(null);
    useOutsideAlerter(Ref);

    const [products, setProducts] = useState(null);
    const [totalPrice, setTotalPrice] = useState(0);

    useEffect(() => {
        // fetchShoppingCart();
    }, [cartToggle])


    const fetchShoppingCart = async () => {
        const res = await fetch("/api/saved-products?type=cart");
        const data = await res.json();
        let products = data.products.filter(x => x.item !== null);

        // Set total price & find imageIndex for each product 
        // (each product has an unique color, and an image corresponding to each color)
        let total = 0;
        products = products.map(x => {
            const countPrice = x.item.price * x.count;
            total += countPrice;
            return {...x, countPrice: parseFloat(countPrice.toFixed(2)), imageIndex: x.item.colors.findIndex(c => c.name === x.color.name)}
        })

        setProducts(products);
        setTotalPrice(total.toFixed(2));
    }

    const removeCart = () => {
        setCartToggle(false)
    }

    function useOutsideAlerter(ref) {
        useEffect(() => {
            function handleClickOutside(event) {
                if (ref.current && !ref.current.contains(event.target)) {
                    removeCart()
                }
            }
    
            // Bind the event listener
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
                // Unbind the event listener on clean up
                document.removeEventListener("mousedown", handleClickOutside);
            };
        }, [ref]);
    }

    var i = 0;
    var noResults = false

    const plus = () => {
        i++;
    }

    const zero = () => {
        if (i == 0) {
            noResults = true
        }
    }

    return (
        <>
            {cartToggle && <div className="helper-cart"  ref={Ref}> {wishlist ? <div className="cart-dropdown-container"> 
                <div className="triangle"/>
                {/* Only here so that the closing function works properly */}
                <div className="random-box" onClick={() => removeCart()}/>
                <div className="item-container-cart">
                        {
                            products && products.map(x => (
                            <div className="item" key={x._id}>
                                <img alt="image" className="item-pic" src={x.item.images[x.imageIndex]}></img>
                                <div className="product-info-wrapper">
                                    <p className="cart-text">{x.item.name}</p>
                                    <p className="cart-ref">ref: {x._id.substring(0, 8)}</p>
                                    <div className="circle-box-wrapper">
                                        <div className="color-box" style={{background: x.color.hex}}></div>
                                        <div className="size-box">{x.size}</div>
                                    </div>
                                </div>
                                <div className="add-remove-box"> 
                                    <div className="item-count">{x.count} item(s)</div>              
                                </div>
                                <p className="price-tag">${x.countPrice}</p>
                            </div>
                            ))
                        }
                        {products && products.length > 0 ? null : <div className="no-cart-items ">You have no products in you cart, go shopping!</div>}
                    </div>
                    <div className="info-cart">
                        <p className="total-text">cart subtotal.</p>
                        <div className="total-sum">${totalPrice}</div>
                        {products && products.length > 0 ? (
                            <svg onClick={() => setNav({path: "/cart", direction: 1})} className ="black-bar"  width="329" height="59" viewBox="0 0 329 59" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="329" height="59" rx="29.5" fill="black"/>
                                <path d="M107.171 27.4375C106.847 24.75 104.813 23.2045 102.12 23.2045C99.0462 23.2045 96.6996 25.375 96.6996 29.1818C96.6996 32.9773 99.0065 35.1591 102.12 35.1591C105.103 35.1591 106.904 33.1761 107.171 31.0341L104.683 31.0227C104.45 32.267 103.472 32.983 102.16 32.983C100.393 32.983 99.194 31.6705 99.194 29.1818C99.194 26.7614 100.376 25.3807 102.177 25.3807C103.523 25.3807 104.495 26.1591 104.683 27.4375H107.171ZM112.193 35.1705C114.841 35.1705 116.489 33.358 116.489 30.6705C116.489 27.9659 114.841 26.1591 112.193 26.1591C109.545 26.1591 107.898 27.9659 107.898 30.6705C107.898 33.358 109.545 35.1705 112.193 35.1705ZM112.205 33.2955C110.983 33.2955 110.358 32.1761 110.358 30.6534C110.358 29.1307 110.983 28.0057 112.205 28.0057C113.403 28.0057 114.028 29.1307 114.028 30.6534C114.028 32.1761 113.403 33.2955 112.205 33.2955ZM119.843 29.9545C119.849 28.8295 120.519 28.1705 121.496 28.1705C122.468 28.1705 123.053 28.8068 123.047 29.875V35H125.468V29.4432C125.468 27.4091 124.275 26.1591 122.457 26.1591C121.161 26.1591 120.224 26.7955 119.832 27.8125H119.729V26.2727H117.422V35H119.843V29.9545ZM131.378 26.2727H129.736V24.1818H127.315V26.2727H126.122V28.0909H127.315V32.6364C127.304 34.3466 128.469 35.1932 130.224 35.1193C130.849 35.0966 131.292 34.9716 131.537 34.892L131.156 33.0909C131.037 33.1136 130.781 33.1705 130.554 33.1705C130.071 33.1705 129.736 32.9886 129.736 32.3182V28.0909H131.378V26.2727ZM132.314 35H134.735V26.2727H132.314V35ZM133.53 25.1477C134.252 25.1477 134.843 24.5966 134.843 23.9205C134.843 23.25 134.252 22.6989 133.53 22.6989C132.814 22.6989 132.223 23.25 132.223 23.9205C132.223 24.5966 132.814 25.1477 133.53 25.1477ZM138.454 29.9545C138.46 28.8295 139.13 28.1705 140.108 28.1705C141.079 28.1705 141.664 28.8068 141.659 29.875V35H144.079V29.4432C144.079 27.4091 142.886 26.1591 141.068 26.1591C139.772 26.1591 138.835 26.7955 138.443 27.8125H138.341V26.2727H136.034V35H138.454V29.9545ZM150.943 31.2841C150.949 32.4545 150.148 33.0682 149.279 33.0682C148.364 33.0682 147.773 32.4261 147.767 31.3977V26.2727H145.347V31.8295C145.353 33.8693 146.546 35.1136 148.301 35.1136C149.614 35.1136 150.557 34.4375 150.949 33.4148H151.04V35H153.364V26.2727H150.943V31.2841ZM158.637 35.1705C160.796 35.1705 162.251 34.1193 162.592 32.5L160.353 32.3523C160.109 33.017 159.484 33.3636 158.677 33.3636C157.467 33.3636 156.7 32.5625 156.7 31.2614V31.2557H162.643V30.5909C162.643 27.625 160.847 26.1591 158.541 26.1591C155.972 26.1591 154.308 27.983 154.308 30.6761C154.308 33.4432 155.95 35.1705 158.637 35.1705ZM156.7 29.7557C156.751 28.7614 157.507 27.9659 158.58 27.9659C159.632 27.9659 160.359 28.7159 160.365 29.7557H156.7ZM171.288 26.2727H169.646V24.1818H167.225V26.2727H166.032V28.0909H167.225V32.6364C167.214 34.3466 168.379 35.1932 170.134 35.1193C170.759 35.0966 171.202 34.9716 171.447 34.892L171.066 33.0909C170.947 33.1136 170.691 33.1705 170.464 33.1705C169.981 33.1705 169.646 32.9886 169.646 32.3182V28.0909H171.288V26.2727ZM176.074 35.1705C178.722 35.1705 180.369 33.358 180.369 30.6705C180.369 27.9659 178.722 26.1591 176.074 26.1591C173.426 26.1591 171.778 27.9659 171.778 30.6705C171.778 33.358 173.426 35.1705 176.074 35.1705ZM176.085 33.2955C174.864 33.2955 174.239 32.1761 174.239 30.6534C174.239 29.1307 174.864 28.0057 176.085 28.0057C177.284 28.0057 177.909 29.1307 177.909 30.6534C177.909 32.1761 177.284 33.2955 176.085 33.2955ZM188.309 35.1705C190.633 35.1705 192.093 33.8068 192.207 31.8011H189.923C189.781 32.733 189.167 33.2557 188.338 33.2557C187.207 33.2557 186.474 32.3068 186.474 30.6364C186.474 28.9886 187.213 28.0455 188.338 28.0455C189.224 28.0455 189.792 28.6307 189.923 29.5H192.207C192.105 27.483 190.576 26.1591 188.298 26.1591C185.65 26.1591 184.014 27.9943 184.014 30.6705C184.014 33.3239 185.622 35.1705 188.309 35.1705ZM195.605 35.1648C196.895 35.1648 197.73 34.6023 198.157 33.7898H198.225V35H200.52V29.1136C200.52 27.0341 198.759 26.1591 196.816 26.1591C194.725 26.1591 193.35 27.1591 193.015 28.75L195.253 28.9318C195.418 28.3523 195.935 27.9261 196.804 27.9261C197.628 27.9261 198.1 28.3409 198.1 29.0568V29.0909C198.1 29.6534 197.503 29.7273 195.986 29.875C194.259 30.0341 192.708 30.6136 192.708 32.5625C192.708 34.2898 193.941 35.1648 195.605 35.1648ZM196.299 33.4943C195.554 33.4943 195.02 33.1477 195.02 32.483C195.02 31.8011 195.583 31.4659 196.435 31.3466C196.963 31.2727 197.827 31.1477 198.117 30.9545V31.8807C198.117 32.7955 197.361 33.4943 196.299 33.4943ZM201.758 35H204.179V30.0625C204.179 28.9886 204.963 28.25 206.031 28.25C206.366 28.25 206.826 28.3068 207.054 28.3807V26.233C206.838 26.1818 206.537 26.1477 206.292 26.1477C205.315 26.1477 204.514 26.7159 204.196 27.7955H204.105V26.2727H201.758V35ZM212.745 26.2727H211.102V24.1818H208.682V26.2727H207.489V28.0909H208.682V32.6364C208.671 34.3466 209.835 35.1932 211.591 35.1193C212.216 35.0966 212.659 34.9716 212.904 34.892L212.523 33.0909C212.404 33.1136 212.148 33.1705 211.921 33.1705C211.438 33.1705 211.102 32.9886 211.102 32.3182V28.0909H212.745V26.2727ZM226.807 35.6364L232.535 29.9091L226.807 24.1818L225.489 25.4943L228.95 28.9489H220.842V30.8693H228.95L225.489 34.3295L226.807 35.6364Z" fill="white"/>
                            </svg>
                        ):null}
                    </div>
            </div> :
            <div className="cart-dropdown-container-big" > 
                <div className="triangle"/>
                {/* Only here so that the closing function works properly */}
                <div className="random-box" onClick={() => removeCart()}/>
                <div className="item-container-cart">
                        {
                            products && products.map(x => (
                            <div className="item" key={x._id}>
                                <img alt="image"  className="item-pic" src={x.item.images[x.imageIndex]}></img>
                                <div className="product-info-wrapper">
                                    <p className="cart-text">{x.item.name}</p>
                                    <p className="cart-ref">ref: {x._id.substring(0, 8)}</p>
                                    <div className="circle-box-wrapper">
                                        <div className="color-box" style={{background: x.color.hex}}></div>
                                        <div className="size-box">{x.size}</div>
                                    </div>
                                </div>
                                <div className="add-remove-box"> 
                                    <div className="item-count">{x.count} item(s)</div>              
                                </div>
                                <p className="price-tag">${x.countPrice}</p>
                            </div>
                            ))
                        }
                        {products && products.length > 0 ? null : <div className="no-cart-items ">You have no products in you cart, go shopping!</div>}
                    </div>
                    <div className="info-cart">
                        <p className="total-text">cart subtotal.</p>
                        <div className="total-sum">${totalPrice}</div>
                        {products && products.length > 0 ? (
                            <svg onClick={() => setNav({path: "/cart", direction: 1})} className ="black-bar" width="329" height="59" viewBox="0 0 329 59" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="329" height="59" rx="29.5" fill="black"/>
                                <path d="M87.7559 27.4375C87.432 24.75 85.398 23.2045 82.7048 23.2045C79.6309 23.2045 77.2843 25.375 77.2843 29.1818C77.2843 32.9773 79.5911 35.1591 82.7048 35.1591C85.6877 35.1591 87.4889 33.1761 87.7559 31.0341L85.2673 31.0227C85.0343 32.267 84.057 32.983 82.7445 32.983C80.9775 32.983 79.7786 31.6705 79.7786 29.1818C79.7786 26.7614 80.9605 25.3807 82.7616 25.3807C84.1082 25.3807 85.0798 26.1591 85.2673 27.4375H87.7559ZM92.7778 35.1705C95.4256 35.1705 97.0733 33.358 97.0733 30.6705C97.0733 27.9659 95.4256 26.1591 92.7778 26.1591C90.1301 26.1591 88.4824 27.9659 88.4824 30.6705C88.4824 33.358 90.1301 35.1705 92.7778 35.1705ZM92.7892 33.2955C91.5676 33.2955 90.9426 32.1761 90.9426 30.6534C90.9426 29.1307 91.5676 28.0057 92.7892 28.0057C93.9881 28.0057 94.6131 29.1307 94.6131 30.6534C94.6131 32.1761 93.9881 33.2955 92.7892 33.2955ZM100.428 29.9545C100.433 28.8295 101.104 28.1705 102.081 28.1705C103.053 28.1705 103.638 28.8068 103.632 29.875V35H106.053V29.4432C106.053 27.4091 104.859 26.1591 103.041 26.1591C101.746 26.1591 100.808 26.7955 100.416 27.8125H100.314V26.2727H98.0072V35H100.428V29.9545ZM111.962 26.2727H110.32V24.1818H107.9V26.2727H106.707V28.0909H107.9V32.6364C107.888 34.3466 109.053 35.1932 110.809 35.1193C111.434 35.0966 111.877 34.9716 112.121 34.892L111.741 33.0909C111.621 33.1136 111.366 33.1705 111.138 33.1705C110.656 33.1705 110.32 32.9886 110.32 32.3182V28.0909H111.962V26.2727ZM112.899 35H115.319V26.2727H112.899V35ZM114.115 25.1477C114.837 25.1477 115.427 24.5966 115.427 23.9205C115.427 23.25 114.837 22.6989 114.115 22.6989C113.399 22.6989 112.808 23.25 112.808 23.9205C112.808 24.5966 113.399 25.1477 114.115 25.1477ZM119.039 29.9545C119.045 28.8295 119.715 28.1705 120.692 28.1705C121.664 28.1705 122.249 28.8068 122.243 29.875V35H124.664V29.4432C124.664 27.4091 123.471 26.1591 121.653 26.1591C120.357 26.1591 119.42 26.7955 119.028 27.8125H118.925V26.2727H116.618V35H119.039V29.9545ZM131.528 31.2841C131.534 32.4545 130.733 33.0682 129.863 33.0682C128.949 33.0682 128.358 32.4261 128.352 31.3977V26.2727H125.932V31.8295C125.937 33.8693 127.13 35.1136 128.886 35.1136C130.199 35.1136 131.142 34.4375 131.534 33.4148H131.625V35H133.949V26.2727H131.528V31.2841ZM139.222 35.1705C141.381 35.1705 142.836 34.1193 143.176 32.5L140.938 32.3523C140.694 33.017 140.069 33.3636 139.262 33.3636C138.051 33.3636 137.284 32.5625 137.284 31.2614V31.2557H143.228V30.5909C143.228 27.625 141.432 26.1591 139.125 26.1591C136.557 26.1591 134.892 27.983 134.892 30.6761C134.892 33.4432 136.534 35.1705 139.222 35.1705ZM137.284 29.7557C137.336 28.7614 138.091 27.9659 139.165 27.9659C140.216 27.9659 140.944 28.7159 140.949 29.7557H137.284ZM151.872 26.2727H150.23V24.1818H147.81V26.2727H146.617V28.0909H147.81V32.6364C147.798 34.3466 148.963 35.1932 150.719 35.1193C151.344 35.0966 151.787 34.9716 152.031 34.892L151.651 33.0909C151.531 33.1136 151.276 33.1705 151.048 33.1705C150.566 33.1705 150.23 32.9886 150.23 32.3182V28.0909H151.872V26.2727ZM156.658 35.1705C159.306 35.1705 160.954 33.358 160.954 30.6705C160.954 27.9659 159.306 26.1591 156.658 26.1591C154.011 26.1591 152.363 27.9659 152.363 30.6705C152.363 33.358 154.011 35.1705 156.658 35.1705ZM156.67 33.2955C155.448 33.2955 154.823 32.1761 154.823 30.6534C154.823 29.1307 155.448 28.0057 156.67 28.0057C157.869 28.0057 158.494 29.1307 158.494 30.6534C158.494 32.1761 157.869 33.2955 156.67 33.2955ZM168.894 35.1705C171.218 35.1705 172.678 33.8068 172.792 31.8011H170.508C170.366 32.733 169.752 33.2557 168.923 33.2557C167.792 33.2557 167.059 32.3068 167.059 30.6364C167.059 28.9886 167.798 28.0455 168.923 28.0455C169.809 28.0455 170.377 28.6307 170.508 29.5H172.792C172.69 27.483 171.161 26.1591 168.883 26.1591C166.235 26.1591 164.599 27.9943 164.599 30.6705C164.599 33.3239 166.207 35.1705 168.894 35.1705ZM176.122 29.9545C176.128 28.8295 176.815 28.1705 177.804 28.1705C178.787 28.1705 179.366 28.8011 179.361 29.875V35H181.781V29.4432C181.787 27.3977 180.582 26.1591 178.764 26.1591C177.44 26.1591 176.554 26.7841 176.156 27.8125H176.054V23.3636H173.702V35H176.122V29.9545ZM187.023 35.1705C189.182 35.1705 190.637 34.1193 190.978 32.5L188.739 32.3523C188.495 33.017 187.87 33.3636 187.063 33.3636C185.853 33.3636 185.086 32.5625 185.086 31.2614V31.2557H191.029V30.5909C191.029 27.625 189.233 26.1591 186.927 26.1591C184.358 26.1591 182.694 27.983 182.694 30.6761C182.694 33.4432 184.336 35.1705 187.023 35.1705ZM185.086 29.7557C185.137 28.7614 185.893 27.9659 186.966 27.9659C188.018 27.9659 188.745 28.7159 188.75 29.7557H185.086ZM195.912 35.1705C198.235 35.1705 199.696 33.8068 199.809 31.8011H197.525C197.383 32.733 196.77 33.2557 195.94 33.2557C194.809 33.2557 194.076 32.3068 194.076 30.6364C194.076 28.9886 194.815 28.0455 195.94 28.0455C196.826 28.0455 197.395 28.6307 197.525 29.5H199.809C199.707 27.483 198.179 26.1591 195.9 26.1591C193.253 26.1591 191.616 27.9943 191.616 30.6705C191.616 33.3239 193.224 35.1705 195.912 35.1705ZM200.719 35H203.139V32.2273L203.793 31.483L206.174 35H209.009L205.605 30.0511L208.844 26.2727H206.066L203.27 29.5852H203.139V23.3636H200.719V35ZM212.975 35.1705C215.623 35.1705 217.271 33.358 217.271 30.6705C217.271 27.9659 215.623 26.1591 212.975 26.1591C210.328 26.1591 208.68 27.9659 208.68 30.6705C208.68 33.358 210.328 35.1705 212.975 35.1705ZM212.987 33.2955C211.765 33.2955 211.14 32.1761 211.14 30.6534C211.14 29.1307 211.765 28.0057 212.987 28.0057C214.186 28.0057 214.811 29.1307 214.811 30.6534C214.811 32.1761 214.186 33.2955 212.987 33.2955ZM223.801 31.2841C223.807 32.4545 223.006 33.0682 222.136 33.0682C221.222 33.0682 220.631 32.4261 220.625 31.3977V26.2727H218.205V31.8295C218.21 33.8693 219.404 35.1136 221.159 35.1136C222.472 35.1136 223.415 34.4375 223.807 33.4148H223.898V35H226.222V26.2727H223.801V31.2841ZM232.16 26.2727H230.518V24.1818H228.097V26.2727H226.904V28.0909H228.097V32.6364C228.086 34.3466 229.251 35.1932 231.006 35.1193C231.631 35.0966 232.075 34.9716 232.319 34.892L231.938 33.0909C231.819 33.1136 231.563 33.1705 231.336 33.1705C230.853 33.1705 230.518 32.9886 230.518 32.3182V28.0909H232.16V26.2727ZM246.223 35.6364L251.95 29.9091L246.223 24.1818L244.905 25.4943L248.365 28.9489H240.257V30.8693H248.365L244.905 34.3295L246.223 35.6364Z" fill="white"/>
                            </svg>
                        ):null}
                    </div>
            </div>} </div>}
            
        </>
    )
}

export default CartDropdown
